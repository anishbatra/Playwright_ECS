name: Playwright Tests
on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  security_scan:
    name: Run OWASP Dependency Check and Gitleaks
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

       # Step 2: Install Docker (Ubuntu runner already has Docker)
      - name: Verify Docker Installation
        run: docker --version

       # Step 3: Run OWASP Dependency Check via Docker
      - name: Run OWASP Dependency Check
        run: |
          mkdir -p reports/dependency-check
          docker run --rm \
            -v "$(pwd)":/src \
            -v "$(pwd)/reports/dependency-check":/report \
            owasp/dependency-check:latest \
            --project "Digital-Banking-Automation" \
            --scan /src \
            --format "ALL" \
            --out /report \
            --failOnCVSS 7
        continue-on-error: false
        # Step 4: Run Gitleaks to detect secrets or credentials
      - name: Run Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          report-format: json
          report-path: reports/gitleaks-report.json

      # Step 5: Upload Reports as Artifacts
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: reports/
  run-tests-and-send-email:
    name: Run Playwright Regression Tests
    runs-on: ubuntu-latest
    needs: security_scan
    timeout-minutes: 120
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Update .env.dev and .env.stage with Secrets
        run: |
          set -e
          mkdir -p env
          touch env/.env.dev env/.env.stage
          # Define file paths
          ENV_FILES=("env/.env.dev" "env/.env.stage")
          # Loop through each .env file and update
          for ENV_FILE in "${ENV_FILES[@]}"; do
            echo "Updating $ENV_FILE"
            # Ensure the file ends with a newline before appending
            if [ -s "$ENV_FILE" ] && [ "$(tail -c 1 "$ENV_FILE")" != "" ]; then
              echo >> "$ENV_FILE"
            fi
            # Update or add TEST_USER
            if grep -q "^TEST_USER=" "$ENV_FILE"; then
              sed -i "s/^TEST_USER=.*/TEST_USER=${{ secrets.TEST_USER }}/" "$ENV_FILE"
            else
              echo "TEST_USER=${{ secrets.TEST_USER }}" >> "$ENV_FILE"
            fi
            # Update or add PASSWORD
            if grep -q "^PASSWORD=" "$ENV_FILE"; then
              sed -i "s/^PASSWORD=.*/PASSWORD=${{ secrets.PASSWORD }}/" "$ENV_FILE"
            else
              echo "PASSWORD=${{ secrets.PASSWORD }}" >> "$ENV_FILE"
            fi
            # Optionally update BASE_URL from secrets if provided
            if [ -n "${{ secrets.BASE_URL }}" ]; then
              if grep -q "^BASE_URL=" "$ENV_FILE"; then
                sed -i "s|^BASE_URL=.*|BASE_URL=${{ secrets.BASE_URL }}|" "$ENV_FILE"
              else
                echo "BASE_URL=${{ secrets.BASE_URL }}" >> "$ENV_FILE"
              fi
            fi
            echo "$ENV_FILE updated successfully"
          done

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests in staging environment
        run: npm run e2e:regression:stage
        continue-on-error: true

      - name: Debug workspace and results
        if: always()
        run: |
          pwd
          ls -la
          echo "--- allure-results ---"
          ls -la allure-results || true
          echo "--- playwright-report ---"
          ls -la playwright-report || true

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload Playwright raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Generate Allure Report
        if: always()
        continue-on-error: true
        run: |
          npm install -g allure-commandline
          if [ -d "allure-results" ] && [ "$(ls -A allure-results 2>/dev/null)" ]; then
            rm -rf allure-results/history || true
            allure generate allure-results --clean -o allure-report
          else
            echo "No allure-results found; skipping Allure report generation."
          fi

      - name: Clean up Allure results before deployment
        if: always()
        run: |
          find ./allure-report -type f -size +100M -exec rm -f {} \;

      - name: Select site directory for Pages
        id: site
        if: always()
        run: |
          if [ -f "allure-report/index.html" ]; then
            echo "dir=allure-report" >> "$GITHUB_OUTPUT"
          elif [ -f "playwright-report/index.html" ]; then
            echo "dir=playwright-report" >> "$GITHUB_OUTPUT"
          else
            echo "dir=" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Pages
        if: always() && steps.site.outputs.dir != ''
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: always() && steps.site.outputs.dir != ''
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.site.outputs.dir }}

      - name: Deploy to GitHub Pages
        id: deploy
        if: always() && steps.site.outputs.dir != ''
        uses: actions/deploy-pages@v4

      - name: Send Email
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.AUTOMATION_EMAIL_USERNAME }}
          password: ${{ secrets.AUTOMATION_EMAIL_PASSWORD }}
          subject: Playwright Automation Report
          body: |
            Hi,
            Please find below the link for Playwright Automation Report

            Deployed URL (if available): ${{ steps.deploy.outputs.page_url }}
            Project Pages URL: https://anishbatra.github.io/Playwright_ECS/

            Best Regards
            Anish
          to: ${{ secrets.RECEPIENT_EMAIL }}
          from: ${{ secrets.AUTOMATION_EMAIL_USERNAME }}